<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>[enzo]lutions</title>
        <link>http://enzolutions.com</link>
        <description>RSS feed for [enzo]lutions</description>
                <atom:link href="http://enzolutions.com/rss.xml" rel="self" type="application/rss+xml" />
                    <item>
                <title>How to enable CORS requests against Drupal 8</title>
                <description><![CDATA[<h1>The Problem</h1>

<p>Nowadays I was creating a new version of my library <a target="_blank" href="https://github.com/enzolutions/backbone.drupal">https://github.com/enzolutions/backbone.drupal</a> to enable to use Drupal 8 in mode <strong>Headless Drupal</strong> using front end in a different domain or subdomain.</p>

<p>The problem I found with <a href="http://enzolutions.com/articles/2014/05/31/what-is-cross-origin-resource-sharing-cors/">CORS</a> requests is related with the way jQuery execute the first request Ajax, because before to do an execution of a GET|PUT|DELETE|POST|PATCH request an <a target="_blank" href="http://restpatterns.org/HTTP_Methods/OPTIONS">OPTIONS</a> request is executed to validate request methods accepted for backend server more information at <a href="http://api.jquery.com/jquery.ajax/">http://api.jquery.com/jquery.ajax/</a> in <strong>contentType</strong> section.</p>

<p>The current status of Rest module (part of Drupal Core) doesn't implement the OPTIONS method, so my first approach was implement that method in class <strong>Drupal\rest\Plugin\rest\resource\EntityResource</strong> using the following code</p>

<pre><code>public function options(EntityInterface $entity) {
   $response = new ResourceResponse();
   $response-&gt;setStatusCode(ResourceResponse::HTTP_OK);
   $response-&gt;headers-&gt;set('Allow', 'GET,POST,PATCH,DELETE,OPTIONS');
   return $response-&gt;send();
  }
</code></pre>

<p>After add that extra function in class <strong>EntityResource</strong> the method was available and double checked with module <a target="_blank" href="https://www.drupal.org/project/restui">RestUI</a>, but this solution wasn't enough because I can't enable OPTIONS method without authentication and jQuery trigger the OPTIONS method without CRC Token or Basic Auth method even if you provide in the original call.</p>

<h1>The Solution</h1>

<p>In order to resolve the problem I use .htaccess and Apache <a target="_blank" href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html">mod_rewrite</a> to enable CORS and intercept the OPTIONS request to avoid Drupal reject the request because doesn't have the proper credentials, I did a patch for Drupal 8 and you can download the patch <a target="_blank" href="https://www.drupal.org/files/issues/core-cors-headers-1869548-26.patch">here</a>.</p>

<p>But let me explain the changes introduced in my patch.</p>

<h2>Intercept OPTIONS Request</h2>

<p>I add a Mod Rewrite Condition and Rule to avoid all OPTIONS request be processed by Drupal and rejected, instead of a <a target="_blank" href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes#2xx_Success">HTTP 200 OK</a> code is returned in order to enable jQuery request continue with the normal workflow.</p>

<p>Check the code below.</p>

<pre><code>RewriteCond %{REQUEST_METHOD} OPTIONS
RewriteRule .* / [R=200,L]
</code></pre>

<h2>Enable CORS</h2>

<p>If you search how to enable CORS using .htaccess you will find tons of similar information and this information usually works, but in our case we have a special situation the intercept process we implemented above.</p>

<p>Because the interception the normal statements to enable CORS doesn't work and apache will reject our request, to resolve this problem I found the condition <a target="_blank" href="http://httpd.apache.org/docs/2.0/mod/mod_headers.html">always</a> for Header directive.</p>

<p>Check the implementation below.</p>

<pre><code>Header always set Access-Control-Allow-Origin "*"
Header always set Access-Control-Allow-Methods "POST, GET, OPTIONS, PATCH, DELETE"
Header always set Access-Control-Allow-Headers: Authorization
</code></pre>

<p>I strongly recommend to change <strong>*</strong> for your frontend domain i.e frontend-example.com.</p>

<p>I expect you have found this entry useful.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/09/08/how-to-enable-cors-requests-against-drupal-8/</link>
                <pubDate>Mon, 08 Sep 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/09/08/how-to-enable-cors-requests-against-drupal-8/</guid>
            </item>
                    <item>
                <title>How to create an interactive command in Node.js</title>
                <description><![CDATA[<p>One of the first things we learn in a new programming language is how to  implement a command line is to read the parameters provided by user in execution, today I want to make my first blog related to <a target="_blank" href="http://nodejs.org/">Node.js</a> and I will show you how to make an interactive interface with Node.js.</p>

<p>For those who are unfamiliar with the concept of interactive interfaces may refer to popular <a target="_blank" href="http://es.wikipedia.org/wiki/Ncurses">NCurses</a> used in <a target="_blank" href="http://es.wikipedia.org/wiki/GNU/Linux">GNU/Linux</a> platforms.</p>

<h1>Install Inquirer plugin.</h1>

<p>Assuming you already installed Node.js we will use npm command to install the plugin inquirer to provide us an easy way to creating an interface.</p>

<pre><code>$ npm install inquirer
</code></pre>

<h1>Create interactive script</h1>

<p>With the Inquirer plugin installed, we need to create a script called interactivo.js in which we will create our script.</p>

<p>The first thing to do is load the library inquirer as shown below.</p>

<pre><code>var inquirer = require("inquirer");
</code></pre>

<p>To use Inquirer we just pass an array of objects with questions and an anonymous function that will process the responses received, let me show an example the format of implementation.</p>

<pre><code>inquirer.prompt([/* Pass your questions in here */], function( answers ) {
    // Use user feedback for... whatever!!
});
</code></pre>

<p>Now let's see the types of questions that we can build.</p>

<h2>Input</h2>

<p>Input type questions are simple questions that can have a default value and the response is stored in a variable equal to the name that is provided in the configuration, see the implementation.</p>

<pre><code>{
  type: 'input',
  name: 'nombre',
  message: 'Nombre Completo?',
  default: 'Jose Perez'
},
</code></pre>

<h2>Confirm</h2>

<p>The confirm questions are of the type Yes or NO let's see an example of its implementation.</p>

<pre><code>{ type: 'confirm',
  name: 'casado',
  message: 'Casado?',
},
</code></pre>

<h1>List</h1>

<p>The list questions allows you to select your answer from a list of predefined options, as shown below.</p>

<pre><code>{
  type: "list",
  name: "estudios",
  message: "Nivel academico?",
  choices: [
    "Primaria",
    "Secundaria",
    new inquirer.Separator(),
    "Bachillerato",
    "Licenciatura",
    "Doctorado"
   ]
},
</code></pre>

<p>This type of question allows placing a separator of options as is seen in the above list.</p>

<h1>Checkbox</h1>

<p>The checkbox questions type allows the user to check a list of options which apply in his case, as shown in the following code listing.</p>

<pre><code>{
  type: "checkbox",
  message: "Servicios Publicos",
  name: "servicios",
  choices: [
    {
      name: "Agua",
      checked: true
    },
    {
      name: "Luz"
    },
    {
      name: "Internet"
    },
    ],
}
</code></pre>

<h1>Password</h1>

<p>The password questions type as its name suggest use a mask to hide what the user is typing on the screen, let's see an example.</p>

<pre><code>{
  type: "password",
  message: "Enter your git password",
  name: "password"
}
</code></pre>

<p>Let's now look full implementation.</p>

<pre><code>var inquirer = require("inquirer");
 
var preguntas = [
    {
      type: 'input',
      name: 'nombre',
      message: 'Nombre Completo?',
      default: 'Jose Perez'
    },
    { type: 'confirm',
      name: 'casado',
      message: 'Casado?',
    },
    { when: function (response) {
        return response.casado;
      },
      type: 'input',
      name: 'hijos',
      message: 'Número de hijos?',
    },
    {
    type: "list",
    name: "estudios",
    message: "Nivel academico?",
    choices: [
      "Primaria",
      "Secundaria",
      new inquirer.Separator(),
      "Bachillerato",
      "Licenciatura",
      "Doctorado"
     ]
    },
    {
    type: "checkbox",
    message: "Servicios Publicos",
    name: "servicios",
    choices: [
      {
        name: "Agua",
        checked: true
      },
      {
        name: "Luz"
      },
      {
        name: "Internet"
      },
      ],
    }
    ];
inquirer.prompt(preguntas, function(respuestas) {
  console.log(respuestas);
});
</code></pre>

<p>As you can see what I did was create an array with objects with the definitions of the types of questions outlined above and this arrangement is passed to inquirer.prompt function and as the second parameter an anonymous function is pass to prints the user's responses.</p>

<p>Within the definition of the questions the script add a bonus which is the use of when tproperty. When is a property that allows us to validate if we show or not a question validating the previous answers as shown below.</p>

<pre><code>when: function (response) {
  return response.casado;
}
</code></pre>

<h1>Execute the script.</h1>

<p>To run the newly created script we just run the following command line.</p>

<pre><code>$ node interactivo.js
</code></pre>

<p>Depending on user responses the result will be different, but similar to the following image.</p>

<p><img src="http://enzolutions.com/assets/img/nodejs_interactive.png"/></p>

<p>I hope you have found this blog useful.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/09/08/how-to-create-an-interactive-command-in-node-js/</link>
                <pubDate>Mon, 08 Sep 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/09/08/how-to-create-an-interactive-command-in-node-js/</guid>
            </item>
                    <item>
                <title>Understanding Configuration Management in Drupal 8</title>
                <description><![CDATA[<p>In few months we will get the new release of Drupal the #8 (I hope) and I think it's time to start to test, learn and write about the new ways we have in Drupal 8 to do our old tricks.</p>

<p>Today I want to talk about the Drupal 8 <a target="_blank" href="http://drupal8cmi.org/">Initiative Configuration Management</a>, this initiative pretend to facilitate the process of pass Site Building stuffs from Dev environments to Production.</p>

<p>As you can imagine this feature will be a replacement of Drupal <a target="_blank" href="https://www.drupal.org/project/features">Features</a> and if you don't use or don't like Features also will be a replacement for Drupal <a target="_blank" href="https://www.drupal.org/project/bundle_copy">Bundle Copy</a></p>

<h1>Installing Drupal 8</h1>

<p>Right now there isn't an official Drupal release for Drupal 8, but if you can start to test you can get directly from git repository.</p>

<p>If you don't have plans to contribute with code to Drupal 8 you can use the following command to get just the latest version of Drupal 8 but without the whole git history reducing dramatically the download process.</p>

<pre><code>git clone -depth 1 --branch 8.0.x http://git.drupal.org/project/drupal.git [FOLDER_NAME]
</code></pre>

<p>After that you just need create a Database and point your webserver to this folder and start the installation in the same way you usually do for Drupal 7.</p>

<h1>Configuration Management Install</h1>

<p>You don't need install Configuration Management module, because is part of Drupal 8 Core and is already installed when you complete a standard Drupal 8 installation, as you can see in the following image.</p>

<p><img src="http://enzolutions.com/assets/img/configuration_management_module_enable.png"/></p>

<p>As you can imagine, you can't disable the Configuration Management module.</p>

<h1>Export Configuration</h1>

<p>As I said at the beginning Configuration Management is a replacement for Features, so you need to work in your website doing Site Building tasks like creating or modifying content types and other tasks like creating Views(part of Drupal 8 Core).</p>

<p>Now we will call the first Drupal 8 Installation <strong>Devel#1</strong> of a new Drupal 8 project and as you can imagine we need to share our progress with the rest of team and to avoid to create a DB Dump and force the rest of the team import we will use the Configuration Management.</p>

<p>The administrator of <strong>Devel#1</strong> has to go page: example.com/admin/config/development/configuration/full/export the UI will looks similar to image below.</p>

<p><img src="http://enzolutions.com/assets/img/configuration_management_full_export.png"></p>

<p>After press the button Export you will get a zip file named <strong>config.tar.gz</strong>, after you uncompress the zip file you will get a config folder with severals files in <a target="_blank" href="http://symfony.com/doc/current/components/yaml/yaml_format.html">YAML</a> format and each one represent a isolate piece of configuration of our site. Below you can a partial list of files created by export.</p>

<pre><code>block.block.bartik_footer.yml       menu.entity.node.page.yml
block.block.bartik_help.yml       menu_link.static.overrides.yml
block.block.bartik_login.yml        menu_ui.settings.yml
block.block.bartik_powered.yml        node.settings.yml
block.block.bartik_search.yml       node.type.article.yml
block.block.bartik_tools.yml        node.type.book.yml
block.block.seven_breadcrumbs.yml     node.type.page.yml
block.block.seven_content.yml       rdf.mapping.comment.comment.yml
block.block.seven_help.yml        rdf.mapping.node.article.yml
</code></pre>

<p>Now we have the options to share all files or just one of them with the rest of the team.</p>

<h1>Importing Configuration</h1>

<p>Now we have the files required to import the configuration in other Drupal installation <strong>Devel#2</strong> but we need to prepare the destination.</p>

<p>The Drupal 8 installation process create two folders to handle the import and export process, the installer create two folders inside <DOCROOT>/sites/default/files using random names, but we can check the proper names checking our configuration at <DOCROOT>/sites/default/setting.php.</p>

<p>Let me show you an example of that configuration file:</p>

<pre><code>$settings['install_profile'] = 'standard';
$config_directories['active'] = 'sites/default/files/config_0HU-CmGmyKok3uG6Ao8Lv4WCsVZDwqitSKnQcUNPJmtrKWdgQuM4nhQNZO_T5Mcsmaz-bFcOyA/active';
$config_directories['staging'] = 'sites/default/files/config_0HU-CmGmyKok3uG6Ao8Lv4WCsVZDwqitSKnQcUNPJmtrKWdgQuM4nhQNZO_T5Mcsmaz-bFcOyA/staging';
</code></pre>

<p>As you can see now we have two concepts <strong>active</strong> and <strong>staging</strong>.</p>

<p>The <strong>active</strong> folder must contain the current site configuration, but by default is empty because the default storage for current site is Database but is possible change I will write about that in other blog entry.</p>

<p>The <strong>staging</strong> folder contain any configuration we want to import in our site, here we must copy the files we get from export process.</p>

<p>I recommend use a version system like GIT to control the staging files and change configuration to use a non hash folder name, check my recommendation below:</p>

<pre><code>$settings['install_profile'] = 'standard';
$config_directories['active'] = 'sites/default/files/config_rK_6KVDPn-s9l-ea_L0XBN1GzJlcnrZ3CssUXn1eQ7G98viRJXesYsSdsf_KjxkCRgelximKzg/active';
$config_directories['staging'] = 'sites/default/config/staging';
</code></pre>

<p>Is required your web server have permissions to read the configuration files, for instance if _www is the user running your web server you must run the following commands:</p>

<pre><code>$ sudo chown -R _www sites/default/config/staging/
$ sudo chmod -R 755 sites/default/config/staging/
</code></pre>

<p>Until here all looks OK, but If you go to the page example.com/admin/config/development/configuration you will get the following error</p>

<p><img src="http://enzolutions.com/assets/img/configuration_management_sync_error.png"/></p>

<p>We will solve this issue in next section.</p>

<h2>Force Site UUID match</h2>

<p>The Configuration Management only allow sync configuration between same site or project to avoid issues importing configuration from site a.com to b.com, to accomplish this validation Drupal 8 generate a <a target="_blank" href="https://www.drupal.org/project/uuid">UUID</a> for each site.</p>

<p>You cat get your current site UUDI executing the following command</p>

<pre><code>$ drush cget system.site
</code></pre>

<p>The command above we will have a similar output to next listing</p>

<pre><code>uuid: 236fa77c-d83e-42de-8a03-03c574c00160
name: backend.com
mail: enzo@enzolutions.com
slogan: ''
page:
  403: ''
  404: ''
  front: node
admin_compact_mode: false
weight_select_max: 100
langcode: en
</code></pre>

<p>The config import has a different UUID, you can confirm the UID with the following command</p>

<pre><code>$ cat sites/default/config/staging/system.site.yml
</code></pre>

<p>For that reason uou need to change the value of Site UUID using the following Drush command:</p>

<pre><code>$ drush cedit system.site
</code></pre>

<p>The command above enable you to use your favorite text editor to set the same UUID present in staging config files.</p>

<h2>Run Sync</h2>

<p>After change the UUID and change the permissions, if you visit again the page example.com/admin/config/development/configuration you will see all changes, deletions, renames, and additions as you can see in the following image:</p>

<p><img src="http://enzolutions.com/assets/img/configuration_management_sync.png"/></p>

<p>You can review the differences and remove some files from staging folder if you are not happy with the result and finally execute the Import All process.</p>

<p>If you are a Drush lover you still can run this process with Drush with the following command:</p>

<pre><code>$ drush config-import staging
</code></pre>

<p>After complete the import you have now site sync.</p>

<p>I hope you have found this article useful.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/08/27/understanding-configuration-management-in-drupal-8/</link>
                <pubDate>Wed, 27 Aug 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/08/27/understanding-configuration-management-in-drupal-8/</guid>
            </item>
                    <item>
                <title>Grunt: How to list available tasks</title>
                <description><![CDATA[<p>In the blog entry <a href="http://enzolutions.com/articles/2014/06/18/introduction-to-grunt/">Introduction to Grunt</a> I  explained how we could use Grunt to automate tasks, but the only way to detect the available tasks is review the Gruntfile.js file or perform the tasks, but it's not be a good idea execute tasks that do not know what they do .</p>

<p>Fortunately there is a plugin that allows  Grunt toe review tasks available, this plugin is <a href="https://github.com/ben-eb/grunt-available-tasks">grunt-available-tasks</a>. Lets see how we can implement it in our  project.</p>

<h1>Install plugin.</h1>

<p>The first thing to do is install the plugin available-tasks running assuming you have npm installed just execute the following command.</p>

<pre><code>$ npm install grunt-available-tasks --save-dev
</code></pre>

<p>The above command will add the respective dependency in your package.json file and you will get a similar entry to the following file.</p>

<pre><code>"grunt-available-tasks":"0.5.0"
</code></pre>

<h1>Add task to Grunt.</h1>

<p>Having as base the file <strong>Gruntfile.js</strong> created in previous entry "Introduction to Grunt" we will include the necessary configuration to add the task to list the available tasks as shown below.</p>

<pre><code>availabletasks: {
  tasks: {
    options: {
      filter: 'exclude',
      tasks: ['availabletasks', 'tasks']
    }
  }              
},
</code></pre>

<p>The above action registers the configuration for the plugin <strong>available-tasks</strong> indicating that we want to exclude from the list of tasks "availabletasks" and "tasks " the last one  is an alias to configure later.</p>

<h1>Load the plugin.</h1>

<p>In order to execute the comand availabletasks/tasks we have load the plugin with the following settings Gruntfile.js close the end of file as shown in the following listing</p>

<pre><code>grunt.loadNpmTasks('grunt-available-tasks');
</code></pre>

<h1>Register the task.</h1>

<p>Finally lets register the task using an alias to facilitate their implementation, for which we just add the following code at the end of the configuration file.</p>

<pre><code>grunt.registerTask('tasks', ['availabletasks']);
</code></pre>

<h1>Run the command</h1>

<p>At this point we could get the tasks available and should just run the following command.</p>

<pre><code>$ grunt tasks
</code></pre>

<p>The above command would get an output  similar to the following image.</p>

<p><img src="http://enzolutions.com/assets/img/grunt-tasks.png"/></p>

<p>The image above was executed within the project <a href="https://github.com/enzolutions/community-bookstore">Community Bookstore</a>. See the full configuration file at <a href="https://github.com/enzolutions/community-bookstore/blob/master/frontend/Gruntfile.js">https://github.com/enzolutions/community-bookstore/blob/master/frontend/Gruntfile.js</a>.</p>

<p>I hope you have been to his liking.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/08/26/grunt-how-to-list-available-tasks/</link>
                <pubDate>Tue, 26 Aug 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/08/26/grunt-how-to-list-available-tasks/</guid>
            </item>
                    <item>
                <title>How to Generate TOC in Github/BitBucket projects</title>
                <description><![CDATA[<p>Nowadays using version control systems like <a href="http://github.com/">Github</a> or <a href="https://bitbucket.org/">Bitbucket</a> for our projects is pretty popular because of their flexibility.</p>

<p>When we are starting our projects both systems recommends the creation of a README.md file to provide an introduction to our projects, but it could turn into documentation.</p>

<p>At first moment the MD extension were not familiar for us and it's normal. The MD extension stands for MarkDown which is a series of dialing rules that will generate a HTML without knowing HTML for tags like bold, subtitle and other special labels in a similar way to that done by <a href="http://wikipedia.org">http://wikipedia.org</a>.</p>

<p>If you want to know a little more about MarkDown you can check the version of Github at <a href="https://help.github.com/articles/github-flavored-markdown">https://help.github.com/articles/github-flavored-markdown</a> and BitBucket version at  <a href="https://bitbucket.org/tutorials/markdowndemo">https://bitbucket.org/tutorials/markdowndemo</a>.</p>

<p>When we have mastered the MarkDown creating sections within our document, the natural evolution is to make a table of contents to make it easier to navigate through Readme file doing our project more professional, but this task can be cumbersome luckily we will see below a tool that does this job for us.</p>

<h1>Install DocToc</h1>

<p>Assuming you have NodeJS installed in your system and therefore the npm command is available run the following command to install the DocToc project.</p>

<pre><code>$ npm install -g doctoc
</code></pre>

<h1>Generating TOC</h1>

<p>Once installed we just need to indicate on which files we are going to generate the TOC. If our project is in github only must execute the following command</p>

<pre><code>$ doctoc README.md
</code></pre>

<p>If our project is hosted in Bitbucket we just need execute the command with a slight variation as shown below.</p>

<pre><code>$ doctoc README.md --bitbucket
</code></pre>

<p>You can see a TOC generated by this command in the project <a href="https://github.com/enzolutions/community-bookstore/">https://github.com/enzolutions/community-bookstore/</a></p>

<p>I hope you have been to his liking.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/08/24/how-to-generate-toc-in-github-bitbucket-projects/</link>
                <pubDate>Sun, 24 Aug 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/08/24/how-to-generate-toc-in-github-bitbucket-projects/</guid>
            </item>
                    <item>
                <title>Mi Tribu</title>
                <description><![CDATA[<p>This is an oratory I did in Spanish for my son Axel to present to his classroom, he is coursing right now 3rd grade.</p>

<p>¿Qué es ser Tico?</p>

<p>Esta es una pregunta que puede ser fácil de responder para muchos, pero si lo piensan un poco mejor puede que no seamos 100% ticos en los que se entiende generalmente.</p>

<p>¿Quien es más tico? un indio Cabécar de la zona de Talamanca o un niño recién nacido en San Carlos?, bueno todo depende de los ojos y la tolerancia con que se mire.</p>

<p>Más del 95% de la población en Costa Rica puede rastrear sus ancestros no más allá de 500 años que fue la época de llegada de los españoles, bajo esta definición sólo los indígenas sin mezcla podrías ser denominados ticos.</p>

<p>Lo curioso es que ellos mismos no se definen como ticos sino como miembros de su tribu, lo que me hace pensar que quizás es suficiente que nosotros sepamos a qué tribu pertenecemos.</p>

<p>Yo, por ejemplo, soy un Tico algo particular, nací en Chepe para decirlo en tico, pero mis padres son colombianos, por lo que se podría decir que soy Colombiano, lo cual me conviene en términos de Fútbol pensando en James Rodríguez y demás jugadores de la Selección de Colombia que hicieron un buen papel en el mundial de Brasil.</p>

<p>Los que negativamente dicen que no soy tico, les puedo decir que en toda mi vida solo he estado 2 semanas fuera de Costa Rica y siento este país mío, como el más tico de todos.</p>

<p>Para mí el ser tico significa que lo acepte yo, y que así lo acepten los demás miembros de mi tribu que son mi familia, vecinos, compañeros de escuela y nuevas personas que se van integrando a mi vida.</p>

<p>Por eso los invito a preocuparnos más en qué podemos hacer, para que nuestro país cada día sea mejor sin importar a qué tribu pertenecemos, porque a final de cuentas todos venimos siendo turistas en este lindo país</p>

<p>Pura Vida.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/08/14/mi-tribu/</link>
                <pubDate>Thu, 14 Aug 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/08/14/mi-tribu/</guid>
            </item>
                    <item>
                <title>Introduction to Bower</title>
                <description><![CDATA[<p><img style="float:left; margin-right: 20px;;" src="http://enzolutions.com/assets/img/bower-logo.png"/> Continuing with the serie "Hot &amp; Sexy tools" available these days for web developers started with the entry of Blog <a target="_blank" href="http://enzolutions.com/articles/2014/06/18/introduction-to-grunt/">Introduction to Grunt</a>, now I come to speak of <a target="_blank" href="http://bower.io/">Bower</a>.</p>

<p>Bower by definition is a package manager for the web, now that simple English means a tool that allows us to define required libraries in our web applications and the bower detect the dependencies of required packages.</p>

<p>When bower check all package dependencies requested and find any inconsistency. It presents a menu to choose which version you want to use.</p>

<p>Now if you ask what kind of packages are available, ranging from packets like <a target="_blank" href="https://github.com/jquery/jquery">jQuery</a> and <a target="_blank" href="https://github.com/twbs/bootstrap">Bootstrap</a> to <a target="_blank"href="https://github.com/torvalds/linux">Linux</a>. All depends on what are our project needs, today bower has nearly fourteen thousand packages.</p>

<h2>How to install Bower.</h2>

<p>Bower is a npm package therefore <a target="_blank" href="http://npmjs.org/">NodeJS</a> is needed, with the following command we can install Bower.</p>

<pre><code>$ npm install -g bower
</code></pre>

<p>With the above command bower would be available to all system users.</p>

<h2>How to use Bower.</h2>

<p>Once Bower is installed you can use immediately in your application to download the packages you want, let's say you need jQuery in your project, well you only need to use the following command to include it.</p>

<pre><code>$ bower install jQuery
</code></pre>

<p>The above command will have the following output, which informs us that versión of jQuery was downloaded.</p>

<pre><code>bower cached        git://github.com/jquery/jquery.git#2.1.1
bower validate      2.1.1 against git://github.com/jquery/jquery.git#*
bower install       jQuery#2.1.1
</code></pre>

<p>If you're wondering where jQuery is installed in the directory where you run the command, you would have a structure similar to the following representation:</p>

<pre><code>.
└── bower_components
    └── jQuery
        ├── MIT-LICENSE.txt
        ├── bower.json
        ├── dist
        └── src
</code></pre>

<p>You see you get the minimized version of jQuery and files for normal development of jQuery is up to us to decide what files must be include in our application.</p>

<p>If you want a specific package version you must provide this information in the install process as shown in the following command:</p>

<pre><code>$ bower install &lt;package&gt;#&lt;version&gt;
</code></pre>

<h2>Group project dependencies.</h2>

<p>As we saw is quite easy to add new components, but it depends on someone memory  to install the required packages, to define all the required packages for our project we use the bower.json file.</p>

<p>Fortunately bower provides us a command that lets you create a basic bower.json file, you can see an output of interactive command <em>$ bower init</em>.</p>

<pre><code>$ bower init
[?] name: MegaProject
[?] version: 0.1.0-alpha
[?] description: Not Available
[?] main file: assets/js/main.js, assets/css/main.css
[?] what types of modules does this package expose?
[?] keywords: HTML5
[?] authors: enzo - Eduardo Garcia &lt;enzo@anexusit.com&gt;
[?] license: MIT
[?] homepage: http://enzolutions.com
[?] set currently installed components as dependencies? Yes
[?] add commonly ignored files to ignore list? Yes
[?] would you like to mark this package as private which prevents it from being [?] would you like to mark this package as private which prevents it from being accidentally published to the registry? No
</code></pre>

<p>This command above will generate a file called bower.json with the following content.</p>

<pre><code>{
  "name": "MegaProject",
  "version": "0.1.0-alpha",
  "authors": [
    "enzo - Eduardo Garcia &lt;enzo@anexusit.com&gt;"
  ],
  "description": "Not Available",
  "main": "assets/js/main.js, assets/css/main.css",
  "keywords": [
    "HTML5"
  ],
  "license": "MIT",
  "homepage": "http://enzolutions.com",
  "ignore": [
    "**/.*",
    "node_modules",
    "bower_components",
    "test",
    "tests"
  ],
  "dependencies": {
    "jQuery": "~2.1.1"
  }
}
</code></pre>

<p>Now what advantage we get from file bower.js file? The first one is portability because we just need put this file in our version control system and when a new developer arrive to team for sure we will need set up his environment; then he just need download the bower.json and run the following command:</p>

<pre><code>$ bower install
</code></pre>

<p>In this case bower detects the existence of a bower.json file and will proceed to install packages included in the file, allowing us to maintain our system clean and avoid having stored 50 versions of jQuery when in the end we are interested in last version of jQuery.</p>

<h2>Specify destination packages.</h2>

<p>As we saw before the default destination is <em>bower_components</em> folder, but it is very likely that this location is not to our liking, if we want to specify a custom destination folder we need to create a file .bowerrc to inform bower about our needs, as shown below.</p>

<pre><code>{
    "directory": "web/vendor"
}
</code></pre>

<p>Which will make the packets are stored in the folder <em>web/vendor</em> or any other you want.</p>

<p>I hope you have been to his liking.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/07/08/introduction-to-bower/</link>
                <pubDate>Tue, 08 Jul 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/07/08/introduction-to-bower/</guid>
            </item>
                    <item>
                <title>How to configure MySQL to import large database</title>
                <description><![CDATA[<p>On many occasions we need to install in our local machine production sites for development or just for faster debugging, this entails that we need to import very large databases.</p>

<p>The most common mistake is that you can not import the database, returning an error that communication with the <a target="_blank" href="http://www.mysql.com/">MySQL</a> server has been lost, as shown below.</p>

<pre><code>$ /mysql -f -uroot -proot mydb -h 127.0.0.1 &lt; ~/Downloads/prod-mysql-2013-01-29.sql
ERROR 2006 (HY000) at line 6565: MySQL server has gone away
$
</code></pre>

<p>To fix this error you must change the default configuration of MySQL, if you do not know the location of this file can use the command shown below to determine at which locations MySQL expects to find the configuration.</p>

<pre><code>$ ./mysql --help | grep my.cnf
/etc/my.cnf /etc/mysql/my.cnf /Applications/MAMP/conf/my.cnf ~/.my.cnf
$
</code></pre>

<p>In my case I have MySQL provided by <a target="_blank" href="http://www.mamp.info">MAMP</a>, so I need create a file in the location /Applications/MAMP/conf/my.cnf, based on a configuration for large databases which is available in the documentation MySQL and should be available in the path <em>/usr/share/doc/mysql-server-5.0/examples/my-large.cnf.gz</em>.</p>

<p>I will apply two changes to enable big importations.</p>

<ul>
<li>Remover Directive # skip-locking</li>
<li>Increase max_allowed_packet = 100M</li>
</ul>

<p>Then you just need restart the MySQL server and try to import the database again.</p>

<p>You can find my version of my.cnf <a target="_blank" href="http://enzolutions.com/assets/attaches/my.cnf.txt">here</a>.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/07/03/how-to-configure-mysql-to-import-large-database/</link>
                <pubDate>Thu, 03 Jul 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/07/03/how-to-configure-mysql-to-import-large-database/</guid>
            </item>
                    <item>
                <title>Introduction to Grunt</title>
                <description><![CDATA[<p><img style="float:left; margin-right: 20px;;" src="http://enzolutions.com/assets/img/grunt-logo.png"/> Today I come to speak of some of those tools that are part of the set of Hot and Sexy for all developers speak nowadays, much to our regret if another tool that apparently there is more to learn: P.</p>

<p>From my own experience I know how difficult it is to have enough time to learn all these Sexy tools, I'll try to explain it in the most practical and easiest way possible.</p>

<h2>What's Grunt.?</h2>

<p>Grunt is a tool to automate tasks is our web projects. The idea is that all of those routine tasks that we do in our projects Grunt make them for us. Among the most common tasks are:</p>

<ul>
<li>Concat files (CSS, JS, etc)</li>
<li>Minify files (CSS, JS, etc)</li>
<li>Optimize images.</li>
<li>Compilation (SASS -> CSS and others)</li>
<li>Unit Test</li>
</ul>

<p>Each of these tasks is implemented by a Grunt plugin, which today has nearly three thousand plugins, you can see the full list of plugins in <a targe="_blank" href="http://gruntjs.com/plugins">http://gruntjs.com/plugins</a>.</p>

<p>Grunt is built with is Javascript  and require <a target="_blank" href="http://nodejs.org/">NodeJS</a> to be executed which makes Grunt multi platform.</p>

<h2>How install Grunt.</h2>

<p>As I said earlier Grunt uses NodeJS to run, but you don't need to know anything about NodeJS to use Grunt, is only required to install and execute, it in the same way we you don't need to know Java to run programs that use the Java JRE.</p>

<p>The first is to install NodeJS, you can find an installer for your platform at <a target="_blank" href="http://nodejs.org/download/">http://nodejs.org/download/</a>.</p>

<p>After install NodeJS we will have NPM (Node Packaged Modules) available, NPM allows us to install packages, all packages available are listed in <a target="_blank" href="https://www.npmjs.org">https://www.npmjs.org</a>. Right now there are almost 80,000 packages and one of them is Grunt.</p>

<p>Now we have to install the package <a target="_blank" href="https://www.npmjs.org/package/grunt-cli">grunt-cli</a>, grunt-cli is a command line interface to interact with grunt. Use the following command to install it.</p>

<pre><code>npm install grunt-cli -g
</code></pre>

<p>The -g option indicates that the package will be install in overall system instead of local.</p>

<p>Now to install the <a target="_blank" href="https://www.npmjs.org/package/grunt">grunt</a> package to execute tasks we have two options.</p>

<h3>Defining package.json</h3>

<p>In our application we need to create a file named <em>package.json</em> that will read by the npm command:</p>

<pre><code>{
  "name": "example-project",
  "version": "0.1.0",
  "devDependencies": {
    "grunt": "~0.4.1"
  }
}
</code></pre>

<p>Then run the command:</p>

<pre><code>$ npm install
</code></pre>

<p>The previous command will read and process the package.json file; installing grunt and his dependencies. Generating an output similar to the following list:</p>

<pre><code>grunt@0.4.5 node_modules/grunt
├── which@1.0.5
├── dateformat@1.0.2-1.2.3
├── eventemitter2@0.4.13
├── getobject@0.1.0
├── rimraf@2.2.8
├── colors@0.6.2
├── hooker@0.2.3
├── async@0.1.22
├── grunt-legacy-util@0.2.0
├── exit@0.1.2
├── lodash@0.9.2
├── coffee-script@1.3.3
├── underscore.string@2.2.1
├── iconv-lite@0.2.11
├── nopt@1.0.10 (abbrev@1.0.5)
├── minimatch@0.2.14 (sigmund@1.0.0, lru-cache@2.5.0)
├── grunt-legacy-log@0.1.1 (underscore.string@2.3.3, lodash@2.4.1)
├── findup-sync@0.1.3 (lodash@2.4.1, glob@3.2.11)
├── glob@3.1.21 (inherits@1.0.0, graceful-fs@1.2.3)
└── js-yaml@2.0.5 (esprima@1.0.4, argparse@0.1.15)
</code></pre>

<p>Grunt and his dependencies remain within the node_modules folder and our directory tree will be similar to the following list:</p>

<pre><code>$ tree -L 3
.
├── node_modules
│   └── grunt
│       ├── CONTRIBUTING.md
│       ├── LICENSE-MIT
│       ├── README.md
│       ├── appveyor.yml
│       ├── internal-tasks
│       ├── lib
│       ├── node_modules
│       └── package.json
└── package.json
</code></pre>

<h3>Generate dependencies in package.json</h3>

<p>If you do not know which version of Grunt we need, we can request to NPM to auto generated grunt dependencies and store in package.json file. We have to create a create a generic package.json file as shown below:</p>

<pre><code>{
  "name": "example-project",
  "version": "0.1.0",
  "devDependencies": {
  }
}
</code></pre>

<p>Now run the installation of grunt informing we want auto generate dependencies as shown in the following command:</p>

<pre><code>$ npm install grunt --save-dev
</code></pre>

<p>After installing grunt and his dependencies our archive package.json will look similar to below:</p>

<pre><code>{
  "name": "example-project",
  "version": "0.1.0",
  "devDependencies": {
    "grunt": "^0.4.5"
  }
}
</code></pre>

<h2>How to create Grunt Tasks.</h2>

<p>At this point we have everything you need to start building tasks you want to use, the first thing to do is create a Gruntfile.js file to define the tasks to automate.</p>

<p>Let's check a minimum file Grunt.</p>

<pre><code>'use strict';
 
module.exports = function (grunt) {
 
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
    });
 
    // Where we tell Grunt we plan to use some plug-ins.
    //grunt.loadNpmTasks('grunt-contrib-xxxx');
 
 
    // Where we tell Grunt what to do when we type "grunt" into the terminal.
    //grunt.registerTask('default', ['xxxx']);
};
</code></pre>

<p>As seen the file has 3 sections.</p>

<ul>
<li>Initconfig: In this area we define tasks to be execute by Grunt</li>
<li>LoadNpmTask: You should make a proper load plugin for the tasks we wish to define.</li>
<li>RegisterTask: We must register the tasks to be run, they can be less than defined tasks.</li>
</ul>

<h3>Install Grunt plugin.</h3>

<p>As an example we will install the plugin <a target="_blank" href="https://github.com/gruntjs/grunt-contrib-concat">concat</a> to merge files, run the following command inside the folder of your project.</p>

<pre><code>$ npm install grunt-contrib-concat --save-dev
</code></pre>

<p>The option - save-dev  amending package.json to add the dependency in file.</p>

<h3>Plugin usage.</h3>

<p>With the plugin concat installed, now we just have to configure in Gruntfile.js file as shown below.</p>

<pre><code>'use strict';
 
module.exports = function (grunt) {
 
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        concat: {
            dist: {
                src: [
                    'js/libs/*.js', // All JS in the libs folder
                    '/js/global.js'  // This specific file
                ],
                dest: '/js/build/production.js',
            }
        }
    });
 
    // Where we tell Grunt we plan to use some plug-ins.
    grunt.loadNpmTasks('grunt-contrib-concat');
 
    // Where we tell Grunt what to do when we type "grunt" into the terminal.
    grunt.registerTask('default', ['concat']);
};
</code></pre>

<p>With this definition we indicate where the files are and where we want the concatenate file be stored, then we load the NPM package and finally register the task.</p>

<p>As you can see on the origin of the files to be concatenated we can use the special character * to define a large group of files.</p>

<h3>Execute task.</h3>

<p>To run the task we just use one of the following commands:</p>

<pre><code>$ grunt
 
$ grunt concat
</code></pre>

<p>The first command runs all available tasks and the second specifies the concat task, as we only have one tasks the result will be the same and we will get an output similar to the following.</p>

<pre><code>Running "concat:dist" (concat) task
File "web/js/build/production.js" created.
 
Done, without errors.
</code></pre>

<p>We can continue increasing our tasks, for instance use output of concat to add a task to minify the file.</p>

<p>All depends on what you need, the limit are  plugins available in grunt (nearly 3,000) and the needs of your project.</p>

<p>I hope you have been to his liking.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/06/18/introduction-to-grunt/</link>
                <pubDate>Wed, 18 Jun 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/06/18/introduction-to-grunt/</guid>
            </item>
                    <item>
                <title>Yeoman Generator: Marionette JS + Drupal</title>
                <description><![CDATA[<p><a href="http://yeoman.io">Yeoman</a> <a href="http://marionettejs.com">MarionetteJS</a> + <a href="drupical.org">Drupal</a> generator</p>

<p>Today I release the version 0.1.0-beta of <a href="http://enzolutions.com/projects/yeoman_generator_marionette_drupal">Yeoman Generator: Marionette + Drupal</a>.</p>

<p>If you want to create your own version of this generator, you can fork or download my version at</p>

<pre><code>$ git clone git@github.com:enzolutions/generator-marionette-drupal.git
</code></pre>

<p>This generator create a structured HTML 5 application generating modules using RequireJS, includes Grunt support to automate tasks.</p>

<p>Compass is used to generate CSS using bootstrap-sass.</p>

<p>The HTML 5 application is defined using a MVC pattern implemented with MarionetteJS and Backbone.Drupal for data model.</p>

<p>Includes scaffolding commands to create templates, models, collections, views and layouts.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/06/16/yeoman-generator-marionette-js-drupal/</link>
                <pubDate>Mon, 16 Jun 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/06/16/yeoman-generator-marionette-js-drupal/</guid>
            </item>
                    <item>
                <title>Routing & Controlling with MarionetteJS</title>
                <description><![CDATA[<p><a target="_blank" href="http://marionettejs.com/">MarionetteJS</a>  is a layer that sits on <a target="_blank" href="http://backbonejs.org">BackboneJS</a> to create scalable and professional applications.</p>

<p>Some features of MarionetteJS are :</p>

<ul>
<li>Scalable: applications are built in modules, and with event-driven architecture</li>
<li>Sensible defaults: Underscore templates are used for view rendering</li>
<li>Easily modifiable: make it work with your application's specific needs</li>
<li>Reduce boilerplate for views, with specialized view types</li>
<li>Build on a modular architecture with an Application and modules that attach to it</li>
<li>Compose your application's visuals at runtime, with the Region and Layout objects</li>
<li>Nested views and layouts within visual regions</li>
<li>Built-in memory management and zombie-killing in views, regions and layouts</li>
<li>Event-driven architecture with Backbone.Wreqr.EventAggregator</li>
<li>Flexible, "as-needed" architecture allowing you to pick and choose what you need</li>
<li>And much, much more</li>
</ul>

<p>In this example I will take the structure of libraries and dependencies explained in the blog entry <a target="_blank" href="http://enzolutions.com/articles/2014/06/01/what-is-and-how-it-works-requirejs/">What is and how it works RequireJS</a> to create a MarionetteJS application.</p>

<h1>1. Router Module.</h1>

<p>MarionetteJS  implements the object <a target="_blank" href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.approuter.md">Marionette.AppRouter</a> that allows you to define the paths that respond to your application. Using <a target="_blank" href="http://requirejs.org/">RequireJS</a> we can create a module that defines an object for our routes, also allows us to create multiple  Route objects that can be instantiated for other applications by convenience.</p>

<p>In our application we create a folder where modules live, named modules. See an example definition of a Route.</p>

<pre><code>define(["marionette"], function (Marionette) {
  var Router = Marionette.AppRouter.extend({
    appRoutes: {
      "": "home",
    },
    /* standard routes can be mixed with appRoutes/Controllers above */
    routes : {
      "hello/:username": "helloBuddy"
    },
    helloBuddy : function (buddy) {
      // Without controller the routing functions live in Router object
      alert("Hello " + buddy);
    }
  });
 
  return Router;
});
</code></pre>

<p>As you can see the code has an anonymus definition that returns a Router object, which then will be required for our application.</p>

<p>Then we must define the properties that are response functions of our application routes.</p>

<p><em>AppRoutes</em>: Property that allows the definition of routes with convention: URL : Method Name, the method must be defined in the Controller module that is associated with the Route within the application. This option allows the response functions change dramatically, depending on the controller being involved in Route.</p>

<p><em>routes</em>: Property that defines routes, but unlike the previous methods will be defined within the Router object. This option ensures that certain (s) routes have a specific desired behavior.</p>

<p>Both properties can be used in the same definition without problem, but the routes should not be repeated.</p>

<p>When the application starts the Router indicate which methods are executed in response to a route visited by a user.</p>

<p>In the definition of Route we use the property routes with dynamic parameters. in the  route hello:username, username is a dynamic value passed as a parameter to the method of response to the route.</p>

<h2>2. Controller Module.</h2>

<p>In the same way we did  for Routing will create a module for the controller, as shown below</p>

<pre><code>define(["marionette"], function (Marionette) {
 
    var Controller = Marionette.Controller.extend({
        initialize : function(options) {
             //TODO: code to initialize
         },
        start: function() {
            //TODO: code to start
        },
 
        /**
         * Initialized on start, without hash
         * @method
         */
         home :  function () {
            alert('Hello Marionette');
        },
    });
 
    return Controller;
});
</code></pre>

<p>This module is anonymous and extend the <a target="_blank" href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.controller.md">Marionette.Controller</a> object as seen have initialize and start methods to perform tasks that are required at the time of the creation of the controller.</p>

<p>Then you must define the properties that are response functions of our application routes. In our case we define the hello method.</p>

<h2>3. Invoking Controller  and Router</h2>

<p>When we declare our application we load the objects that define the Router and Controller, as shown below.</p>

<pre><code>// Loading dependences and module to execute Marionette App
require( ["marionette","../modules/AppRouter", "../modules/AppController"], function (Marionette, AppRouter, AppController) {
    // set up the app instance
    var MyApp = new Marionette.Application();
 
    // initialize the app controller
    var controller = new AppController({});
 
    // initialize the app router
    MyApp.addInitializer(function(options) {
        // initialize the router
        var router = new AppRouter({
          controller : controller
        });
    });
 
    MyApp.on("initialize:after", function(){
      // Start Backbone history a necessary step for bookmarkable URL's
      Backbone.history.start();
    });
 
    MyApp.start({});
});
</code></pre>

<p>Although Route and Controller modules were anonymous, using RequireJS we can do load modules using the relative path of the modules as shown in detail in the next line.</p>

<pre><code>require( ["marionette","../modules/AppRouter", "../modules/AppController"], function (Marionette, AppRouter, AppController) {
</code></pre>

<p>The returned objects are passed as a parameter to the anonymous function that defines the application.</p>

<p>As seen proceeds to create an instance of the Controller object, which will be later used in the definition of the Router.</p>

<pre><code>// initialize the app controller
var controller = new AppController({});
</code></pre>

<p>In the initialization of our MarionetteJS application, we create the Router using the Controller.</p>

<pre><code>// initialize the app router
MyApp.addInitializer(function(options) {
  // initialize the router
  var router = new AppRouter({
    controller : controller
  });
});
</code></pre>

<p>Finally after finishing the initialization of our application should be activated BackboneJS history of what that will activate the process of routing.</p>

<pre><code>MyApp.on("initialize:after", function(){
  // Start Backbone history a necessary step for bookmarkable URL's
  Backbone.history.start();
});
</code></pre>

<p>When it loads the application we will getan alert with the message "Hello Marionette" and if you change the URL to index.html#hello/ enzo you will get a resul similar to the following output.</p>

<p><img src="http://7sabores.com/sites/default/files/styles/large/public/marionette_routing_sample.png?itok=2lla5O-u"/></p>
]]></description>
                <link>http://enzolutions.com/articles/2014/06/02/routing-controlling-with-marionettejs/</link>
                <pubDate>Mon, 02 Jun 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/06/02/routing-controlling-with-marionettejs/</guid>
            </item>
                    <item>
                <title>What is and how it works RequireJS</title>
                <description><![CDATA[<p><a target="_blank" href="http://requirejs.org/">RequireJS</a> is a JavaScript library that allows us to isolate the components of our JS application as modules and resolve their dependencies.</p>

<p>RequireJS implements the design pattern of software <a target="_blank" href="http://en.wikipedia.org/wiki/Asynchronous_module_definition">AMD</a> (Asynchronous Module Definition) which you could say is very similar to <a target="_blank" href="http://en.wikipedia.org/wiki/Dependency_injection">Dependency injection</a> implemented by frameworks like <a target="_blank" href="http://symfony.com/">Symfony</a>.</p>

<p>Let's check how we can use in our JS application in simple steps.</p>

<h2>1. Define entry point for RequireJS.</h2>

<p>We must download the lastest version of RequireJS library available on the website <a target="_blank" href="http://requirejs.org">http://requirejs.org</a>, after download will put in a directory called libs just for purposes of this example (tested with version 2.1.11).</p>

<p>Now we need to  define a html file and could named index.html where RequireJS is loading as shown below.</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script data-main="libs/main" src="libs/require.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>As you can see the inclusión is done with the script tag at the end of the HTML tag body, but it could also be done within the head tag.</p>

<p>It's also possible to include RequireJS remotely using the URL <a target="_blank" href="http://requirejs.org/docs/release/2.1.11/minified/require.js">http://requirejs.org/docs/release/2.1.11/minified/require.js</a> or similar, but it is a desition of the reader.</p>

<p>As can be seen RequireJS  use the meta-data property <em>data-main</em>(, with this property we can define the entry point for RequireJS configuration, which is a relative path for the file we choose to load teh RequireJS configuraton (is necesarry exlude the js extension).</p>

<h2>2. Configure RequireJS</h2>

<p>In the file libs/main.js we define the RequireJS options. The first thing we should to define is which JS libraries will use in our application as shown below.</p>

<pre><code>require.config({
    baseUrl: 'libs',
    paths : {
      backbone : 'backbone',
      underscore : 'underscore',
      jquery : 'jquery',
      marionette : 'backbone.marionette',
      wreqr : 'backbone.wreqr',
      eventbinder : 'backbone.eventbinder',
      babysitter : 'backbone.babysitter'
  }
});
</code></pre>

<p>All files are seek in the directory defined using the <em>baseUrl</em> property, and the <em>paths</em> property allow define the location of the libraries required with a key to refer to the library later. The js extension is not required and will be added by RequireJS later.</p>

<p>As its name suggests the pattern AMD makes an asynchronous load of packages. But because not all the libraries implement the AMD pattern, is likely to a library A try to use a function defined in library B not yet loaded causing a fatal error.</p>

<p>To resolve this issue we use the property <em>Shim</em> part of  RequireJS configuration, as we see below.</p>

<pre><code>require.config({,
  shim : {
    jquery : {
      exports : 'jQuery'
    },
    underscore : {
      exports : '_'
    },
    backbone : {
      deps : ['jquery', 'underscore'],
      exports : 'Backbone'
    },
    wreqr: {
      deps : ['backbone']
    },
    eventbinder : {
      deps : ['backbone']
    },
    babysitter : {
      deps: ['backbone']
    },
    marionette : {
      deps: ['wreqr', 'eventbinder', 'babysitter'],
      exports : 'Marionette'
    }
  }
});
</code></pre>

<p>Using Shim we can define dependencies between libraries and allow to export global variables that can be used within other libraries such as jQuery library which  export  the variable jQuery.</p>

<p>The configuration with the Shim is a replacement for Order plugin used before version 2.0 of RequireJS.</p>

<p>The exports variable can also be an anonymous function to return the call noConflict function, if the library supports it.</p>

<p>Using the <em>deps</em> property, you can define multiple dependencies of libraries should be loaded before including the library that are defining, such as backbone that depends on jquery and underscore to be used.</p>

<p>Of course if we want to use the library with RequireJS  and supports AMD configuration pattern Shim isn't required.</p>

<h2>3. How to execute code required.</h2>

<p>Once defined libraries and its dependencies if necessary, we can now rewrite the code we need as shown below.</p>

<pre><code>// Loading dependences and execute Marionette App
require( ["marionette"], function (Marionette) {
    // set up the app instance
    var MyApp = new Marionette.Application();
 
    MyApp.on("initialize:after", function(){
      alert("Application has started!");
    });
 
    MyApp.start();
});
</code></pre>

<p>The above code checks that all the libraries needed to run Marionette are loaded before executing the code and get the exported global variable as a parameter.</p>

<p>In the anonymous function will create a Marionette Application and start it, As result we  will get an alert with the message "Application has started".</p>

<p>The require function has the same effect of an anonymous function, meaning that run without problems but can not be used later.</p>

<h2>4. How to create named modules.</h2>

<p>If we want encapsulate our App we must create named modules using the funcion <em>define</em>; The diference with require function is  an extra parameter that is used to name the module and returns an object or variable that will be used when the module is instantiated.</p>

<p>Then consider the previous example as a named module.</p>

<pre><code>define( 'MyApp', ["marionette"], function (Marionette) {
 
    // set up the app instance
    var MyApp = new Marionette.Application();
 
    MyApp.on("initialize:after", function(){
      alert("Application has started!");
    });
 
    // export the app from this module
    return MyApp;
});
 
// Fetch and execute Marionette App
require( ["MyApp"], function (MyApp) {
    // Execute App
    MyApp.start();
});
</code></pre>

<p>As you see we register a named module <em>MyApp</em> and  returns an object defined in Marionette.</p>

<p>Then with a <em>require</em> function the module is loaded, it receives as parameters the object returns by the module and can thus start our application.</p>

<p>It might seem a waste of time doing it this way as it is in the same file, but the idea is to create a module for file and using the configuration of RequireJS load all the libraries that define modules and then use these modules in our application.</p>

<p>You can download the <a target="_blank" href="http://enzolutions.com/projects/marionettejs_skeleton_app">Marionette App Skeleton</a> repository which implements the concepts discussed here.</p>

<p>I hope you have been to his liking.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/06/01/what-is-and-how-it-works-requirejs/</link>
                <pubDate>Sun, 01 Jun 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/06/01/what-is-and-how-it-works-requirejs/</guid>
            </item>
                    <item>
                <title>What is Cross-Origin Resource Sharing (CORS)</title>
                <description><![CDATA[<p>Nowdays is pretty common to transfer data between web applications via Web Services to  clients that require information on different interfaces such as REST, XMLRPC, JSON, JSON-RPC, SOAP and others.</p>

<p>Almost all sites today are built using JavaScript, generating AJAX calls with XMLHttpRequest mechanism to get information  from external sites. To enable this kind of comunication is necessary implement "cross-domain" requests would otherwise be forbidden by web browsers, per the <a target="_blank" href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin security policy</a>.</p>

<p>Lets imagine the following scenery: we have a frontend application using the domain http://a.com and this application wants to use data provided by a  backend site located in domain http://b.com. For security this type of communication is blocked and the end user will be only able to get the information from http://a.com, this scenario is exemplified in the following image.</p>

<p><img src="http://enzolutions.com/assets/img/crossdomain.png"/></p>

<p>To enable this kind of communication is requiered that your backed server (http//b.com) returns the specific HTTP Headers to enable CORS comunication. Below you can see an example of HTTP Header required.</p>

<pre><code>Access-Control-Allow-Credentials:true
Access-Control-Allow-Headers:X-CSRF-Token
Access-Control-Allow-Methods:POST,ADD,GET,PUT,DELETE,OPTIONS
Access-Control-Allow-Origin:http://localhost:8080
</code></pre>

<p>The header <em>Access-Control-Allow-Credentials</em> is only used if your request require some kind of authentication. You can read more information about all HTTP Headers at <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">Access Controls - CORS</a>.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/05/31/what-is-cross-origin-resource-sharing-cors/</link>
                <pubDate>Sat, 31 May 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/05/31/what-is-cross-origin-resource-sharing-cors/</guid>
            </item>
                    <item>
                <title>How to configure MySQL to import large database</title>
                <description><![CDATA[<p>On many occasions we need to install in our local enviroment a copy of production sites for development or debugging process, this entails that need to import large databases.</p>

<p>The most common error is that you cannot import the database because for some reason you loose the communication with the <a target="_blank" href="http://www.mysql.com/">MySQL</a> server, as shown below.</p>

<pre><code>$ /mysql -f -uroot -proot mydb -h 127.0.0.1 &lt; ~/Downloads/prod-mysql-2013-01-29.sql
ERROR 2006 (HY000) at line 6565: MySQL server has gone away
</code></pre>

<p>To fix this error you must to change the default configuration of MySQL.</p>

<p>MySQL store his configuration in a file commonly named my.cnf and could be located in different locations depending the OS version you have installed.</p>

<p>If you do not know the location of this file, you can use the following command shown below to determine where you expect to find locations MySQL settings.</p>

<pre><code>$ ./mysql --help | grep my.cnf
/etc/my.cnf /etc/mysql/my.cnf /Applications/MAMP/conf/my.cnf ~/.my.cnf
</code></pre>

<p>In my case I had MySQL as part of <a target="_blank" href="http://www.mamp.info/">MAMP</a> and this file is not created by default. For this reason I will create a new file located at <em>/Applications/MAMP/conf/my.cnf</em> becuase is one of the location where MySQL will look his configuration file.</p>

<p>I recommend to use the sample provided by MySQL documentation for large databases localed at <em>/usr/share/doc/mysql-server-5.0/examples/my-large.cnf.gz.</em></p>

<p>After copy the suggested configuration from documantion, I have to apply two changes to warranty the import process don't fail.</p>

<ul>
<li><p>Remove Directive # <em>skip-locking</em></p></li>
<li><p>Increase setting <em>max_allowed_packet = 100M</em></p></li>
</ul>

<p>Then just be enough restart the MySQL server and try to import the database again.</p>

<p>You can check my version of my.cnf <a target="_blank" href="http://7sabores.com/sites/default/files/my.cnf_.txt">here</a></p>
]]></description>
                <link>http://enzolutions.com/articles/2014/05/28/how-to-configure-mysql-to-import-large-database/</link>
                <pubDate>Wed, 28 May 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/05/28/how-to-configure-mysql-to-import-large-database/</guid>
            </item>
                    <item>
                <title>My blog is alive again!</title>
                <description><![CDATA[<p>Hello folks.</p>

<p>After many years without touch my personal website, I took the decision to put it back online.</p>

<p>Recently I have been writing technical documentation in Spanish in the website <a href="http://7sabores.com" target="_blank">7Sabores.com</a>. If you are wondering Why in Spanish? and if you read Spanish you can find my justification in the blog entry <a href='http://7sabores.com/blog/se-busca-en-espanol'>¿Se busca en Español?</a>.</p>

<p>I will not translate all my Spanish entries to English or viceversa, all depends my mood :P.</p>

<p>Also I have to say THANKS YOU to two great products <a targe="_blank" href="https://pages.github.com/">GitHub Pages</a> and <a href="http://spress.yosymfony.com/">[S]press</a>. Without them this blog couldn't be possible.</p>

<p>See you around.</p>
]]></description>
                <link>http://enzolutions.com/articles/2014/05/21/my-blog-is-alive-again/</link>
                <pubDate>Wed, 21 May 2014 09:31:12 -0600</pubDate>
                <guid>http://enzolutions.com/articles/2014/05/21/my-blog-is-alive-again/</guid>
            </item>
            </channel>
</rss>
